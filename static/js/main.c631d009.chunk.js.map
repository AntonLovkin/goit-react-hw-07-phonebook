{"version":3,"sources":["redux/contacts/contacts-actions.js","components/Filter.js","redux/contacts/contacts-operations.js","components/Contacts/Contacts-list.js","components/Contact-form/Contact-form.js","App.js","reportWebVitals.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","connect","state","value","contacts","filter","dispatch","onChange","evt","target","className","type","axios","defaults","baseURL","name","number","contact","post","then","data","catch","error","id","delete","a","get","getFilteredContacts","allContacts","normalizedFilter","toLowerCase","includes","items","filteredContacts","onDeleteContact","contactsOperations","map","onClick","ContactForm","handleChange","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","fetchContacts","placeholder","pattern","title","required","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","_","payload","alert","console","log","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c631d009.chunk.js","sourcesContent":["// import types from \"./contacts-types\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction(\"contacts/changeFilter\");\n\n// export default {addContactRequest, addContactSuccess, addContactError, deleteContact, changeFilter };","import React from \"react\";\nimport { connect } from \"react-redux\";\n// import contactsActions from \"../redux/contacts/contacts-actions\";\nimport {changeFilter} from '../redux/contacts/contacts-actions'\n\nconst Filter = ({ value, onChange }) => (\n  <div className=\"filter\">\n    <label className=\"label\">\n      Find contacts by name:\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      ></input>\n    </label>\n  </div>\n);\n\nconst mapStateToProps = (state) => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (evt) => dispatch(changeFilter(evt.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError\r\n} from './contacts-actions'\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n\r\n        dispatch(fetchContactsSuccess(data))\r\n\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error))\r\n    }\r\n\r\n    // axios\r\n    //     .get(`/contacts`)\r\n    //     .then(({data}) => dispatch(fetchContactsSuccess(data)))\r\n    //     .catch(error => dispatch(fetchContactsError(error)))\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number,\r\n        // completed: false,\r\n    };\r\n      \r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)))\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(deleteContactSuccess(id)))\r\n        .catch(error => dispatch(deleteContactError(error)))\r\n};\r\n\r\nexport default {addContact, deleteContact, fetchContacts}","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from '../../redux/contacts/contacts-operations'\n// import contactsActions from \"../../redux/contacts/contacts-actions\";\nimport \"./contacts-list.css\";\n\nconst ContactsList = ({ filteredContacts, onDeleteContact }) => (\n  <ul className=\"contact-list\">\n    {filteredContacts.map(({ name, number, id }) => (\n      <li key={id} className=\"contact-item\">\n        <span className=\"contact-name\">{name} : </span>\n        <span className=\"contact-number\"> {number}</span>\n        <button\n          className=\"button contact-item__button\"\n          onClick={() => onDeleteContact(id)}\n        >\n          Удалить\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nconst getFilteredContacts = (allContacts, filter) => {\n  \n  // const { filter, contacts } = this.state;\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  filteredContacts: getFilteredContacts(items, filter),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\nimport \"../base.css\";\nimport \"../Contact-form/contact-form.css\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  componentDidMount() {\n    this.props.fetchContacts()\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    const { name, number } = this.state;\n    // console.log({ name }, { number });\n\n    this.props.onSubmit(name, number);\n    // console.log(name , number);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form className=\"contacts-form\" onSubmit={this.handleSubmit}>\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            placeholder=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\" \"\n            required\n          />\n        </label>\n\n        <label className=\"label\">\n          Number\n          <input\n            className=\"input\"\n            value={this.state.number}\n            onChange={this.handleChange}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button className=\"button add\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsOperations.addContact(name, number)),\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts())\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import Filter from \"./components/Filter\";\nimport ContactsList from \"./components/Contacts/Contacts-list\";\nimport ContactForm from \"./components/Contact-form/Contact-form\";\n\nconst App = () => (\n  <>\n    <h1>Phonebook</h1>\n    <ContactForm />\n\n    <h2>Contacts</h2>\n    <Filter />\n\n    <ContactsList />\n  </>\n);\n\nexport default App;","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport {\n    addContactSuccess,\n    deleteContactSuccess,\n    fetchContactsSuccess,\n    changeFilter\n} from './contacts-actions'\n// import actions from \"./contacts-actions\";\n// import types from \"./contacts-types\";\n\n// console.log(actions.addContact.type);\n\nconst items = createReducer(([]), {\n  [fetchContactsSuccess]: (_, {payload}) => payload,\n  [addContactSuccess]: (state, { payload }) => {\n    if (state.map(({ name }) => name).includes(payload.name)) {\n      alert(`${payload.name} is already in contacts`);\n      console.log(payload.name);\n      return \n    } \n      return [payload, ...state];\n    \n  },\n\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {})\n\nexport default combineReducers({\n  items,\n  filter,\n  error\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n// import storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contacts/contacts-reducer\";\n\n// const myMiddleware = store => next => action => {\n//   console.log('My middleware');\n// }\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n  // myMiddleware\n];\n\n// const persistConfig = {\n//   key: \"contacts\",\n//   storage,\n//   blacklist: [\"filter\"],\n// };\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n    // contacts: persistReducer(persistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\n// const persistor = persistStore(store);\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}